import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, ScrollView, Pressable, Image, ActivityIndicator, Animated, Easing } from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useAppContext } from '../../context/AppContext';
import { StatusBar } from 'expo-status-bar';
import { Audio } from 'expo-av';
import { SafeAreaView } from 'react-native-safe-area-context';

const MalwareLesson = ({ onComplete, onBack }) => {
  const { completeLessonAndUpdateXP } = useAppContext();
  const [step, setStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [quizAnswer, setQuizAnswer] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [sound, setSound] = useState();
  const [gameScore, setGameScore] = useState(0);
  const [gameActive, setGameActive] = useState(false);
  const [malwareItems, setMalwareItems] = useState([]);
  const [foundItems, setFoundItems] = useState([]);
  const [timeLeft, setTimeLeft] = useState(30);
  const [gameComplete, setGameComplete] = useState(false);
  
  // Animation values
  const fadeAnim = useState(new Animated.Value(0))[0];
  const scaleAnim = useState(new Animated.Value(0.95))[0];
  
  // Play sound effect
  const playSound = async (type) => {
    try {
      const { sound } = await Audio.Sound.createAsync(
        type === 'success' 
          ? require('../../assets/sounds/success.mp3') 
          : require('../../assets/sounds/error.mp3')
      );
      setSound(sound);
      await sound.playAsync();
    } catch (error) {
      console.log('Error playing sound:', error);
    }
  };
  
  // Clean up sound resources
  useEffect(() => {
    return sound
      ? () => {
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);
  
  // Animate component entry
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 500,
        easing: Easing.out(Easing.back(1.5)),
        useNativeDriver: true,
      })
    ]).start();
  }, [step]);
  
  // Game timer
  useEffect(() => {
    let interval;
    if (gameActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => prev - 1);
      }, 1000);
    } else if (timeLeft === 0 && gameActive) {
      setGameActive(false);
      setGameComplete(true);
    }
    return () => clearInterval(interval);
  }, [gameActive, timeLeft]);
  
  // Initialize malware game
  const startMalwareGame = () => {
    // Create random malware items
    const generateItems = [
      { id: 1, type: 'trojan', name: 'Suspicious File.exe', isMalware: true, points: 10 },
      { id: 2, type: 'worm', name: 'Network_Scanner.exe', isMalware: true, points: 15 },
      { id: 3, type: 'ransomware', name: 'URGENT_Document.pdf.exe', isMalware: true, points: 20 },
      { id: 4, type: 'adware', name: 'Free_Screensaver.exe', isMalware: true, points: 5 },
      { id: 5, type: 'document', name: 'Project_Report.docx', isMalware: false, points: -5 },
      { id: 6, type: 'image', name: 'Vacation_Photo.jpg', isMalware: false, points: -5 },
      { id: 7, type: 'application', name: 'Browser_Update.msi', isMalware: false, points: -10 },
      { id: 8, type: 'spyware', name: 'Free_VPN_Client.exe', isMalware: true, points: 15 },
      { id: 9, type: 'video', name: 'Conference_Recording.mp4', isMalware: false, points: -5 },
      { id: 10, type: 'rootkit', name: 'System_Optimizer.exe', isMalware: true, points: 25 },
    ];
    
    // Shuffle the array
    const shuffled = [...generateItems].sort(() => 0.5 - Math.random());
    setMalwareItems(shuffled);
    setFoundItems([]);
    setGameScore(0);
    setTimeLeft(30);
    setGameActive(true);
    setGameComplete(false);
  };
  
  // Handle game item selection
  const handleItemSelect = (item) => {
    if (foundItems.includes(item.id)) return;
    
    setFoundItems(prev => [...prev, item.id]);
    
    if (item.isMalware) {
      setGameScore(prev => prev + item.points);
      playSound('success');
    } else {
      setGameScore(prev => prev + item.points);
      playSound('error');
    }
    
    // Check if all malware found
    const allMalwareCount = malwareItems.filter(i => i.isMalware).length;
    const foundMalwareCount = malwareItems
      .filter(i => i.isMalware && foundItems.includes(i.id))
      .length + 1;
    
    if (foundMalwareCount >= allMalwareCount) {
      setGameActive(false);
      setGameComplete(true);
    }
  };

  const lessons = [
    {
      title: 'Understanding Malware',
      content: [
        'Malware, short for malicious software, is designed to damage, disrupt, or gain unauthorized access to computer systems.',
        'Common types include viruses, worms, trojans, ransomware, spyware, and adware.',
        'Malware can steal your data, damage your files, or even take control of your device.',
      ],
      icon: 'bug-report',
    },
    {
      title: 'How Malware Spreads',
      content: [
        'Malware can spread through:',
        '• Suspicious email attachments',
        '• Malicious website downloads',
        '• Infected USB drives',
        '• Fake software updates',
        '• Compromised mobile apps',
      ],
      icon: 'share',
    },
    {
      title: 'Warning Signs of Infection',
      content: [
        'Your device may be infected if you notice:',
        '• Unexpected slowdowns or crashes',
        '• Strange pop-ups or ads',
        '• Missing files or money',
        '• Battery draining quickly',
        '• Unfamiliar apps or processes',
      ],
      icon: 'warning',
    },
    {
      title: 'Malware Detection Game',
      content: [
        "Let's practice identifying malware!",
        "In this game, you'll see a list of files on a computer.",
        'Your job is to identify and remove all malware before time runs out.',
        'Be careful - removing legitimate files will cost you points!',
      ],
      icon: 'videogame-asset',
      isGame: true,
    },
    {
      title: 'Protection Best Practices',
      content: [
        'Protect yourself against malware:',
        '• Keep software and operating systems updated',
        '• Use reputable antivirus software',
        '• Be cautious with email attachments',
        '• Only download from trusted sources',
        '• Create regular backups of important data',
      ],
      icon: 'security',
    },
    {
      title: 'Knowledge Check',
      quiz: {
        question: 'Which of these is NOT a common sign of malware infection?',
        options: [
          { id: 1, text: 'Computer running slower than usual' },
          { id: 2, text: 'Pop-up advertisements appearing frequently' },
          { id: 3, text: 'Regular automatic updates from the operating system' },
          { id: 4, text: 'Unfamiliar programs starting automatically' },
        ],
        correctAnswer: 3,
        explanation: 'Regular automatic updates are actually a good sign that your system is maintaining security. The other options are common indicators of malware infection.',
      },
      icon: 'quiz',
      isQuiz: true,
    },
  ];
  
  const handleNext = async () => {
    if (step === lessons.length - 1) {
      // Last step - complete lesson
      setLoading(true);
      try {
        // Mark the 'malware' module lesson as complete with 35 XP reward
        const success = await completeLessonAndUpdateXP('malware', step, 35);
        if (success) {
          onComplete?.();
        }
      } catch (error) {
        console.error('Error completing lesson:', error);
      } finally {
        setLoading(false);
      }
    } else {
      // Move to next step
      setStep(step + 1);
      setShowFeedback(false);
      setSubmitted(false);
      
      // Mark each step as a lesson completion for progressive XP
      if (step >= 0 && step < lessons.length - 1) {
        try {
          // 15 XP per intermediate step (smaller reward than final completion)
          await completeLessonAndUpdateXP('malware', step, 15);
        } catch (error) {
          console.error('Error marking step completion:', error);
        }
      }
    }
  };
  
  const handleBack = () => {
    if (step > 0) {
      setStep(step - 1);
      setShowFeedback(false);
      setSubmitted(false);
      setGameActive(false);
    } else {
      onBack?.();
    }
  };
  
  const handleQuizSubmit = () => {
    setSubmitted(true);
    setShowFeedback(true);
  };
  
  const currentLesson = lessons[step];
  
  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <StatusBar style="light" />
      
      <View style={styles.header}>
        <Pressable style={styles.backButton} onPress={handleBack}>
          <MaterialIcons name="arrow-back" size={24} color="#FFF" />
        </Pressable>
        <Text style={styles.headerTitle}>Malware Protection</Text>
        <View style={styles.progressText}>
          <Text style={styles.progressTextContent}>{step + 1}/{lessons.length}</Text>
        </View>
      </View>
      
      <ScrollView style={styles.content}>
        <Animated.View 
          style={[
            styles.lessonContainer,
            {
              opacity: fadeAnim,
              transform: [{ scale: scaleAnim }]
            }
          ]}
        >
          <View style={styles.iconContainer}>
            <MaterialIcons name={currentLesson.icon} size={48} color="#3FFFA8" />
          </View>
          
          <Text style={styles.lessonTitle}>{currentLesson.title}</Text>
          
          {!currentLesson.isQuiz && !currentLesson.isGame && (
            <View style={styles.lessonContent}>
              {currentLesson.content.map((item, index) => (
                <Text key={index} style={styles.contentText}>{item}</Text>
              ))}
            </View>
          )}
          
          {currentLesson.isGame && (
            <View style={styles.gameContainer}>
              {currentLesson.content.map((item, index) => (
                <Text key={index} style={styles.contentText}>{item}</Text>
              ))}
              
              {!gameActive && !gameComplete && (
                <Pressable style={styles.gameStartButton} onPress={startMalwareGame}>
                  <MaterialIcons name="play-arrow" size={24} color="#0B132B" />
                  <Text style={styles.gameStartButtonText}>Start Game</Text>
                </Pressable>
              )}
              
              {gameActive && (
                <>
                  <View style={styles.gameHeader}>
                    <View style={styles.gameScore}>
                      <MaterialIcons name="stars" size={20} color="#FFD700" />
                      <Text style={styles.gameScoreText}>Score: {gameScore}</Text>
                    </View>
                    <View style={styles.gameTimer}>
                      <MaterialIcons name="timer" size={20} color="#3FFFA8" />
                      <Text style={styles.gameTimerText}>{timeLeft}s</Text>
                    </View>
                  </View>
                  
                  <View style={styles.gameItemsContainer}>
                    <Text style={styles.gameInstructions}>
                      Tap on files that look suspicious and might be malware
                    </Text>
                    
                    {malwareItems.map((item) => (
                      <Pressable 
                        key={item.id}
                        style={[
                          styles.gameItem,
                          foundItems.includes(item.id) && (
                            item.isMalware ? styles.gameItemMalware : styles.gameItemSafe
                          )
                        ]}
                        onPress={() => handleItemSelect(item)}
                        disabled={foundItems.includes(item.id)}
                      >
                        <MaterialIcons 
                          name={
                            item.type === 'trojan' ? 'warning' :
                            item.type === 'worm' ? 'bug-report' :
                            item.type === 'ransomware' ? 'lock' :
                            item.type === 'adware' ? 'open-in-new' :
                            item.type === 'document' ? 'description' :
                            item.type === 'image' ? 'image' :
                            item.type === 'application' ? 'get-app' :
                            item.type === 'spyware' ? 'visibility' :
                            item.type === 'video' ? 'videocam' : 'settings'
                          } 
                          size={24} 
                          color={foundItems.includes(item.id) ? '#FFF' : '#3FFFA8'} 
                        />
                        <Text style={styles.gameItemName}>{item.name}</Text>
                        
                        {foundItems.includes(item.id) && (
                          <View style={styles.gameItemResult}>
                            <MaterialIcons 
                              name={item.isMalware ? 'dangerous' : 'check-circle'} 
                              size={20} 
                              color="#FFF" 
                            />
                            <Text style={styles.gameItemPoints}>
                              {item.isMalware ? `+${item.points}` : item.points}
                            </Text>
                          </View>
                        )}
                      </Pressable>
                    ))}
                  </View>
                </>
              )}
              
              {gameComplete && (
                <View style={styles.gameComplete}>
                  <View style={styles.gameCompleteHeader}>
                    <MaterialIcons 
                      name={gameScore >= 30 ? 'emoji-events' : 'stars'} 
                      size={48} 
                      color={gameScore >= 30 ? '#FFD700' : '#3FFFA8'} 
                    />
                    <Text style={styles.gameCompleteTitle}>
                      {gameScore >= 30 ? 'Great job!' : 'Nice try!'}
                    </Text>
                    <Text style={styles.gameCompleteScore}>Final Score: {gameScore}</Text>
                  </View>
                  
                  <Text style={styles.gameCompleteFeedback}>
                    {gameScore >= 30 
                      ? 'You successfully protected the system from malware! Your quick detection skills saved the day.'
                      : 'You found some malware, but missed a few. Keep practicing to improve your detection skills!'}
                  </Text>
                  
                  <Pressable style={styles.gameResetButton} onPress={startMalwareGame}>
                    <MaterialIcons name="replay" size={20} color="#0B132B" />
                    <Text style={styles.gameResetButtonText}>Play Again</Text>
                  </Pressable>
                </View>
              )}
            </View>
          )}
          
          {currentLesson.isQuiz && (
            <View style={styles.quizContainer}>
              <Text style={styles.quizQuestion}>{currentLesson.quiz.question}</Text>
              
              <View style={styles.quizOptions}>
                {currentLesson.quiz.options.map((option) => (
                  <Pressable
                    key={option.id}
                    style={[
                      styles.quizOption,
                      quizAnswer === option.id && styles.quizOptionSelected,
                      showFeedback && option.id === currentLesson.quiz.correctAnswer && styles.quizOptionCorrect,
                      showFeedback && quizAnswer === option.id && option.id !== currentLesson.quiz.correctAnswer && styles.quizOptionIncorrect,
                    ]}
                    onPress={() => !submitted && setQuizAnswer(option.id)}
                    disabled={submitted}
                  >
                    <Text style={[
                      styles.quizOptionText,
                      showFeedback && option.id === currentLesson.quiz.correctAnswer && styles.quizOptionTextCorrect,
                      showFeedback && quizAnswer === option.id && option.id !== currentLesson.quiz.correctAnswer && styles.quizOptionTextIncorrect,
                    ]}>
                      {option.text}
                    </Text>
                    
                    {showFeedback && option.id === currentLesson.quiz.correctAnswer && (
                      <MaterialIcons name="check-circle" size={24} color="#3FFFA8" />
                    )}
                    {showFeedback && quizAnswer === option.id && option.id !== currentLesson.quiz.correctAnswer && (
                      <MaterialIcons name="cancel" size={24} color="#FF5252" />
                    )}
                  </Pressable>
                ))}
              </View>
              
              {!submitted ? (
                <Pressable
                  style={[styles.quizSubmitButton, !quizAnswer && styles.quizSubmitButtonDisabled]}
                  onPress={handleQuizSubmit}
                  disabled={!quizAnswer}
                >
                  <Text style={styles.quizSubmitButtonText}>Submit Answer</Text>
                </Pressable>
              ) : (
                <View style={styles.quizFeedback}>
                  <Text style={styles.quizFeedbackTitle}>
                    {quizAnswer === currentLesson.quiz.correctAnswer ? 'Correct!' : 'Incorrect!'}
                  </Text>
                  <Text style={styles.quizFeedbackText}>{currentLesson.quiz.explanation}</Text>
                </View>
              )}
            </View>
          )}
        </Animated.View>
      </ScrollView>
      
      <View style={styles.footer}>
        {loading ? (
          <ActivityIndicator color="#3FFFA8" size="small" />
        ) : (
          <Pressable 
            style={[
              styles.nextButton,
              currentLesson.isQuiz && !submitted && styles.nextButtonDisabled
            ]} 
            onPress={handleNext}
            disabled={currentLesson.isQuiz && !submitted}
          >
            <Text style={styles.nextButtonText}>
              {step === lessons.length - 1 ? 'Complete Lesson' : 'Continue'}
            </Text>
            <MaterialIcons name="arrow-forward" size={20} color="#0B132B" />
          </Pressable>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0B132B',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(127, 0, 255, 0.2)',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFF',
    textAlign: 'center',
    marginLeft: -32, // Offset the back button to center text
  },
  progressText: {
    backgroundColor: 'rgba(63, 255, 168, 0.2)',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  progressTextContent: {
    color: '#3FFFA8',
    fontWeight: 'bold',
    fontSize: 12,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  lessonContainer: {
    borderRadius: 16,
    backgroundColor: 'rgba(127, 0, 255, 0.15)',
    padding: 20,
    marginBottom: 20,
  },
  iconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: 'rgba(63, 255, 168, 0.15)',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    marginBottom: 20,
  },
  lessonTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFF',
    textAlign: 'center',
    marginBottom: 20,
  },
  lessonContent: {
    marginBottom: 20,
  },
  contentText: {
    fontSize: 16,
    color: '#FFF',
    opacity: 0.9,
    marginBottom: 12,
    lineHeight: 24,
  },
  footer: {
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(127, 0, 255, 0.2)',
  },
  nextButton: {
    backgroundColor: '#3FFFA8',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 24,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  nextButtonDisabled: {
    backgroundColor: 'rgba(63, 255, 168, 0.4)',
    opacity: 0.7,
  },
  nextButtonText: {
    color: '#0B132B',
    fontWeight: 'bold',
    fontSize: 16,
    marginRight: 8,
  },
  // Quiz Styles
  quizContainer: {
    marginTop: 10,
  },
  quizQuestion: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFF',
    marginBottom: 20,
  },
  quizOptions: {
    marginBottom: 20,
  },
  quizOption: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  quizOptionSelected: {
    backgroundColor: 'rgba(127, 0, 255, 0.3)',
    borderColor: '#7F00FF',
    borderWidth: 1,
  },
  quizOptionCorrect: {
    backgroundColor: 'rgba(63, 255, 168, 0.3)',
    borderColor: '#3FFFA8',
    borderWidth: 1,
  },
  quizOptionIncorrect: {
    backgroundColor: 'rgba(255, 82, 82, 0.3)',
    borderColor: '#FF5252',
    borderWidth: 1,
  },
  quizOptionText: {
    color: '#FFF',
    fontSize: 16,
    flex: 1,
  },
  quizOptionTextCorrect: {
    color: '#3FFFA8',
    fontWeight: 'bold',
  },
  quizOptionTextIncorrect: {
    color: '#FF5252',
    fontWeight: 'bold',
  },
  quizSubmitButton: {
    backgroundColor: '#7F00FF',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 24,
    alignItems: 'center',
    marginTop: 10,
  },
  quizSubmitButtonDisabled: {
    backgroundColor: 'rgba(127, 0, 255, 0.3)',
  },
  quizSubmitButtonText: {
    color: '#FFF',
    fontWeight: 'bold',
    fontSize: 16,
  },
  quizFeedback: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
    borderRadius: 12,
    marginTop: 20,
  },
  quizFeedbackTitle: {
    color: '#3FFFA8',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  quizFeedbackText: {
    color: '#FFF',
    fontSize: 14,
    lineHeight: 20,
  },
  // Game Styles
  gameContainer: {
    marginTop: 10,
  },
  gameStartButton: {
    backgroundColor: '#3FFFA8',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 24,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20,
    alignSelf: 'center',
  },
  gameStartButtonText: {
    color: '#0B132B',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 8,
  },
  gameHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 16,
    padding: 12,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
  },
  gameScore: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  gameScoreText: {
    color: '#FFD700',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 4,
  },
  gameTimer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  gameTimerText: {
    color: '#3FFFA8',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 4,
  },
  gameInstructions: {
    color: '#FFF',
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 16,
    fontStyle: 'italic',
  },
  gameItemsContainer: {
    marginBottom: 20,
  },
  gameItem: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  gameItemMalware: {
    backgroundColor: 'rgba(255, 82, 82, 0.3)',
    borderColor: '#FF5252',
    borderWidth: 1,
  },
  gameItemSafe: {
    backgroundColor: 'rgba(63, 255, 168, 0.3)',
    borderColor: '#3FFFA8',
    borderWidth: 1,
  },
  gameItemName: {
    color: '#FFF',
    fontSize: 16,
    marginLeft: 12,
    flex: 1,
  },
  gameItemResult: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  gameItemPoints: {
    color: '#FFF',
    fontWeight: 'bold',
    fontSize: 14,
    marginLeft: 4,
  },
  gameComplete: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 20,
    borderRadius: 12,
    marginTop: 20,
  },
  gameCompleteHeader: {
    alignItems: 'center',
    marginBottom: 16,
  },
  gameCompleteTitle: {
    color: '#FFF',
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 12,
    marginBottom: 8,
  },
  gameCompleteScore: {
    color: '#FFD700',
    fontSize: 18,
    fontWeight: 'bold',
  },
  gameCompleteFeedback: {
    color: '#FFF',
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 24,
  },
  gameResetButton: {
    backgroundColor: '#3FFFA8',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 24,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
  },
  gameResetButtonText: {
    color: '#0B132B',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 8,
  },
});

export default MalwareLesson; 